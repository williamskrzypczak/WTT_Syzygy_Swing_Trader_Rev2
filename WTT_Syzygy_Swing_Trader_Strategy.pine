//@version=5
strategy("WTT_Syzygy_Swing_Trader_Strategy", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100, commission_type=strategy.commission.percent, commission_value=0.1)

// =============================================================================
// WTT SYZYGY SWING TRADER - STRATEGY VERSION
// =============================================================================
// This strategy version allows testing both dynamic swing-based stops and fixed 10 PIP stops
// =============================================================================

// Strategy Configuration
use_fixed_stops = input.bool(false, "Use Fixed 10 PIP Stops", tooltip="Enable to use fixed 10 PIP stops instead of dynamic swing-based stops")
fixed_stop_pips = input.float(10.0, "Fixed Stop Loss (PIPs)", minval=1.0, maxval=100.0, step=1.0, tooltip="Fixed stop loss distance in PIPs")

// Core Input Parameters
lookback = input.int(7, "Lookback Period", minval=1, maxval=50)
show_labels = input.bool(true, "Show Labels")
show_trend_lines = input.bool(true, "Show Trend Lines")

// Risk-Reward Optimization Inputs
show_risk_reward = input.bool(true, "Show Risk-Reward Analysis")
show_table = input.bool(true, "Show Table")
show_stop_targets = input.bool(true, "Show Stop Loss & Take Profit")
light_table_theme = input.bool(false, "Light Table Theme (Toggle for Dark)")
show_debug_symbols = input.bool(false, "Show Debug Symbols")

// Technical Indicators Inputs
show_volume = input.bool(true, "Show Volume in Table")
enable_volume_filter = input.bool(true, "Enable Volume Filter for Breakouts")
volume_filter_threshold = input.float(0.0, "Volume Filter Threshold (Z-Score)", minval=-2.0, maxval=2.0, step=0.1, tooltip="Only take breakouts when volume z-score is above this threshold. 0.0 = average volume, 1.0 = high volume, -1.0 = low volume")
show_rsi = input.bool(true, "Show RSI in Table")
rsi_length = input.int(14, "RSI Length", minval=1, maxval=50)

// Profit Maximization Inputs
enable_partial_taking = input.bool(true, "Enable Partial Profit Taking")
partial_exit_ratio = input.float(1.0, "Partial Exit at R:R Ratio", minval=0.5, maxval=3.0, step=0.1)
partial_exit_size = input.float(50.0, "Partial Exit Size (%)", minval=25.0, maxval=75.0, step=5.0)
enable_trailing_stop = input.bool(true, "Enable Trailing Stop Loss")
trailing_activation_ratio = input.float(0.5, "Trailing Stop Activation (R:R)", minval=0.25, maxval=1.0, step=0.1)
trailing_distance = input.float(0.5, "Trailing Stop Distance (R:R)", minval=0.1, maxval=2.0, step=0.1)

// Strategy Variables
var float swing_high = na
var float swing_low = na
var int swing_high_bar = na
var int swing_low_bar = na
var float most_recent_high = na
var float most_recent_low = na

// Arrays to store historical swing points
var array<float> swing_highs = array.new<float>()
var array<float> swing_lows = array.new<float>()
var array<int> swing_high_bars = array.new<int>()
var array<int> swing_low_bars = array.new<int>()

// Variables to track horizontal lines
var line high_line = na
var line low_line = na
var label high_label = na
var label low_label = na

// Variables to track breakout states
var bool high_breached = false
var bool low_breached = false

// Risk-Reward Optimization Variables
var float entry_price = na
var float stop_loss = na
var float take_profit = na
var float risk_amount = na
var float opposite_risk = na
var float risk_reward_ratio = na
var string trade_signal = na
var bool new_setup_triggered = false

// Variables to track persistent profit target lines
var line profit_target_line = na
var float last_take_profit = na
var string last_trade_signal = na
var label pt_label = na

// Variables to track persistent stop loss lines
var line stop_loss_line = na
var float last_stop_loss = na
var label sl_label = na
var int setup_bar = na

// Variables to track persistent partial exit level
var float persistent_partial_exit_level = na

// Success Rate Tracking Variables
var int total_breaches = 0
var int successful_trades = 0
var int partial_successes = 0
var float total_profit_achieved = 0.0
var float total_risk_taken = 0.0
var bool current_trade_active = false
var float max_pips_beyond_breakout = 0.0
var float last_entry_price = na
var float persistent_entry_price = na
var float trade_profit_achieved = 0.0
var float trade_risk_taken = 0.0

// Profit Maximization Variables
var bool partial_taken = false
var bool trailing_activated = false
var float trailing_stop_level = na
var float partial_exit_level = na
var float remaining_position_size = 100.0

// Strategy Position Tracking
var bool in_long_position = false
var bool in_short_position = false
var float strategy_entry_price = na
var float strategy_stop_loss = na
var float strategy_take_profit = na

// Detect swing high
is_swing_high = ta.pivothigh(high, lookback, lookback)
if not na(is_swing_high)
    swing_high := is_swing_high
    swing_high_bar := bar_index - lookback
    most_recent_high := is_swing_high
    array.push(swing_highs, swing_high)
    array.push(swing_high_bars, swing_high_bar)
    
    if array.size(swing_highs) > 5
        array.shift(swing_highs)
        array.shift(swing_high_bars)

// Detect swing low
is_swing_low = ta.pivotlow(low, lookback, lookback)
if not na(is_swing_low)
    swing_low := is_swing_low
    swing_low_bar := bar_index - lookback
    most_recent_low := is_swing_low
    array.push(swing_lows, swing_low)
    array.push(swing_low_bars, swing_low_bar)
    
    if array.size(swing_lows) > 5
        array.shift(swing_lows)
        array.shift(swing_low_bars)

// Analyze patterns
var string trend_status = "Sideways"
if array.size(swing_highs) >= 2 and array.size(swing_lows) >= 2
    last_high = array.get(swing_highs, array.size(swing_highs) - 1)
    prev_high = array.get(swing_highs, array.size(swing_highs) - 2)
    last_low = array.get(swing_lows, array.size(swing_lows) - 1)
    prev_low = array.get(swing_lows, array.size(swing_lows) - 2)
    
    if last_high > prev_high and last_low > prev_low
        trend_status := "↗️"
    else if last_high < prev_high and last_low < prev_low
        trend_status := "↘️"
    else
        trend_status := "↔️"

// Risk-Reward Optimization Logic
if show_risk_reward and not na(most_recent_high) and not na(most_recent_low)
    current_price = close
    
    // Volume calculation for filtering
    float avg_volume = ta.sma(volume, 20)
    float vol_std = ta.stdev(volume, 20)
    float volume_z_score = vol_std > 0 ? (volume - avg_volume) / vol_std : 0.0
    bool volume_filter_passed = not enable_volume_filter or (enable_volume_filter and not na(volume_z_score) and not na(volume_filter_threshold) and volume_z_score >= volume_filter_threshold)
    
    // Check for new breaches
    bool new_long_breach = close > most_recent_high and close[1] <= most_recent_high and (na(entry_price) or trade_signal != "LONG") and volume_filter_passed
    bool new_short_breach = close < most_recent_low and close[1] >= most_recent_low and (na(entry_price) or trade_signal != "SHORT") and volume_filter_passed
    
    if new_long_breach or new_short_breach
        new_setup_triggered := true
        total_breaches := total_breaches + 1
        
        if current_trade_active
            current_trade_active := false
        
        current_trade_active := true
        max_pips_beyond_breakout := 0.0
        trade_profit_achieved := 0.0
        trade_risk_taken := 0.0
        persistent_partial_exit_level := na
    
    // Long setup
    if new_long_breach
        entry_price := most_recent_high
        
        // Calculate stop loss based on strategy setting
        if use_fixed_stops
            stop_loss := entry_price - (fixed_stop_pips / 10000)  // Convert PIPs to price
        else
            stop_loss := most_recent_low
        
        risk_amount := entry_price - stop_loss
        opposite_risk := entry_price - most_recent_low
        take_profit := entry_price + opposite_risk
        
        if risk_amount > 0
            risk_reward_ratio := (take_profit - entry_price) / risk_amount
        else
            risk_reward_ratio := na
            
        trade_signal := "LONG"
        max_pips_beyond_breakout := entry_price
        last_entry_price := entry_price
        persistent_entry_price := entry_price
        
        if enable_partial_taking
            partial_exit_level := entry_price + (take_profit - entry_price) * partial_exit_ratio
            persistent_partial_exit_level := partial_exit_level
            partial_taken := false
            remaining_position_size := 100.0
        
        if enable_trailing_stop
            trailing_activated := false
            trailing_stop_level := na
        
    // Short setup
    else if new_short_breach
        entry_price := most_recent_low
        
        // Calculate stop loss based on strategy setting
        if use_fixed_stops
            stop_loss := entry_price + (fixed_stop_pips / 10000)  // Convert PIPs to price
        else
            stop_loss := most_recent_high
        
        risk_amount := stop_loss - entry_price
        opposite_risk := most_recent_high - entry_price
        take_profit := entry_price - opposite_risk
        
        if risk_amount > 0
            risk_reward_ratio := (entry_price - take_profit) / risk_amount
        else
            risk_reward_ratio := na
            
        trade_signal := "SHORT"
        max_pips_beyond_breakout := entry_price
        last_entry_price := entry_price
        persistent_entry_price := entry_price
        
        if enable_partial_taking
            partial_exit_level := entry_price - (entry_price - take_profit) * partial_exit_ratio
            persistent_partial_exit_level := partial_exit_level
            partial_taken := false
            remaining_position_size := 100.0
        
        if enable_trailing_stop
            trailing_activated := false
            trailing_stop_level := na
        
    else
        entry_price := na
        stop_loss := na
        take_profit := na
        risk_amount := na
        risk_reward_ratio := na
        trade_signal := na

// Strategy Entry Logic
if new_setup_triggered and not na(entry_price) and not na(stop_loss) and not na(take_profit)
    if trade_signal == "LONG" and not in_long_position and not in_short_position
        strategy.entry("Long", strategy.long)
        in_long_position := true
        in_short_position := false
        strategy_entry_price := entry_price
        strategy_stop_loss := stop_loss
        strategy_take_profit := take_profit
        
    else if trade_signal == "SHORT" and not in_short_position and not in_long_position
        strategy.entry("Short", strategy.short)
        in_short_position := true
        in_long_position := false
        strategy_entry_price := entry_price
        strategy_stop_loss := stop_loss
        strategy_take_profit := take_profit

// Strategy Exit Logic
if in_long_position
    strategy.exit("Long Exit", "Long", stop=strategy_stop_loss, limit=strategy_take_profit)
    if close <= strategy_stop_loss or close >= strategy_take_profit
        in_long_position := false
        strategy_entry_price := na
        strategy_stop_loss := na
        strategy_take_profit := na

if in_short_position
    strategy.exit("Short Exit", "Short", stop=strategy_stop_loss, limit=strategy_take_profit)
    if close >= strategy_stop_loss or close <= strategy_take_profit
        in_short_position := false
        strategy_entry_price := na
        strategy_stop_loss := na
        strategy_take_profit := na

// Track maximum price movement beyond breakout for active trades
if current_trade_active and not na(entry_price)
    if last_trade_signal == "LONG"
        max_pips_beyond_breakout := math.max(max_pips_beyond_breakout, high)
    else if last_trade_signal == "SHORT"
        max_pips_beyond_breakout := math.min(max_pips_beyond_breakout, low)

// Profit Maximization Logic
if current_trade_active and not na(last_entry_price) and not na(persistent_partial_exit_level)
    if enable_partial_taking and not partial_taken
        if (last_trade_signal == "LONG" and close >= persistent_partial_exit_level) or (last_trade_signal == "SHORT" and close <= persistent_partial_exit_level)
            partial_taken := true
            remaining_position_size := 100.0 - partial_exit_size
            
            if last_trade_signal == "LONG"
                trade_profit_achieved := (persistent_partial_exit_level - last_entry_price) * (partial_exit_size / 100.0)
                trade_risk_taken := (last_entry_price - last_stop_loss) * (partial_exit_size / 100.0)
            else if last_trade_signal == "SHORT"
                trade_profit_achieved := (last_entry_price - persistent_partial_exit_level) * (partial_exit_size / 100.0)
                trade_risk_taken := (last_stop_loss - last_entry_price) * (partial_exit_size / 100.0)
            
            partial_successes := partial_successes + 1
            total_profit_achieved := total_profit_achieved + trade_profit_achieved
            total_risk_taken := total_risk_taken + trade_risk_taken
    
    if enable_trailing_stop and not trailing_activated
        float current_rr = 0.0
        if last_trade_signal == "LONG"
            current_rr := (close - last_entry_price) / (last_entry_price - last_stop_loss)
        else if last_trade_signal == "SHORT"
            current_rr := (last_entry_price - close) / (last_stop_loss - last_entry_price)
        
        if current_rr >= trailing_activation_ratio
            trailing_activated := true
            if last_trade_signal == "LONG"
                trailing_stop_level := close - (last_entry_price - last_stop_loss) * trailing_distance
            else if last_trade_signal == "SHORT"
                trailing_stop_level := close + (last_stop_loss - last_entry_price) * trailing_distance
            
            if show_risk_reward and show_stop_targets and not na(stop_loss_line)
                line.set_color(stop_loss_line, color.rgb(255, 165, 0))
                label.set_color(sl_label, color.rgb(255, 165, 0))
                label.set_text(sl_label, "TS")
    
    if trailing_activated and not na(trailing_stop_level)
        if last_trade_signal == "LONG"
            trailing_stop_level := math.max(trailing_stop_level, close - (last_entry_price - last_stop_loss) * trailing_distance)
        else if last_trade_signal == "SHORT"
            trailing_stop_level := math.min(trailing_stop_level, close + (last_stop_loss - last_entry_price) * trailing_distance)
        
        if show_risk_reward and show_stop_targets and not na(stop_loss_line) and not na(setup_bar)
            line.set_xy2(stop_loss_line, setup_bar + 50, trailing_stop_level)
            line.set_xy1(stop_loss_line, setup_bar - 10, trailing_stop_level)
            label.set_xy(sl_label, setup_bar + 55, trailing_stop_level)

// Breach Detection Logic
if not na(most_recent_high)
    high_breached := close > most_recent_high

if not na(most_recent_low)
    low_breached := close < most_recent_low

// Create horizontal lines with labels for swing points
if not na(swing_high) and show_labels
    line.delete(high_line)
    line_color = high_breached ? color.lime : color.teal
    high_line := line.new(swing_high_bar, swing_high, bar_index + 20, swing_high, color=line_color, width=2, style=line.style_solid)
    label.delete(high_label)
    high_label := label.new(bar_index + 5, swing_high, trend_status, color=line_color, style=label.style_label_left, textcolor=color.white, size=size.large)

if not na(swing_low) and show_labels
    line.delete(low_line)
    line_color = low_breached ? color.rgb(255, 20, 147) : color.gray
    low_line := line.new(swing_low_bar, swing_low, bar_index + 20, swing_low, color=line_color, width=2, style=line.style_solid)
    label.delete(low_label)
    low_label := label.new(bar_index + 5, swing_low, trend_status, color=line_color, style=label.style_label_left, textcolor=color.white, size=size.large)

// Draw trend lines
if show_trend_lines and array.size(swing_highs) >= 2 and array.size(swing_lows) >= 2
    high1_bar = array.get(swing_high_bars, array.size(swing_high_bars) - 2)
    high1_price = array.get(swing_highs, array.size(swing_highs) - 2)
    high2_bar = array.get(swing_high_bars, array.size(swing_high_bars) - 1)
    high2_price = array.get(swing_highs, array.size(swing_highs) - 1)
    
    line.new(high1_bar, high1_price, high2_bar, high2_price, color=color.teal, width=2)
    
    low1_bar = array.get(swing_low_bars, array.size(swing_low_bars) - 2)
    low1_price = array.get(swing_lows, array.size(swing_lows) - 2)
    low2_bar = array.get(swing_low_bars, array.size(swing_low_bars) - 1)
    low2_price = array.get(swing_lows, array.size(swing_lows) - 1)
    
    line.new(low1_bar, low1_price, low2_bar, low2_price, color=color.gray, width=2)

// Plot Risk-Reward Analysis
if show_risk_reward and show_stop_targets and new_setup_triggered
    line.delete(profit_target_line)
    last_take_profit := take_profit
    last_trade_signal := trade_signal
    last_stop_loss := stop_loss
    setup_bar := bar_index
    
    profit_target_line := line.new(setup_bar - 10, take_profit, setup_bar + 50, take_profit, color=color.lime, width=2, style=line.style_dashed)
    label.delete(pt_label)
    pt_label := label.new(setup_bar + 55, take_profit, "PT", color=color.lime, style=label.style_label_left, textcolor=color.white, size=size.small)
    
    line.delete(stop_loss_line)
    stop_loss_line := line.new(setup_bar - 10, stop_loss, setup_bar + 50, stop_loss, color=color.rgb(255, 20, 147), width=2, style=line.style_dashed)
    label.delete(sl_label)
    sl_label := label.new(setup_bar + 55, stop_loss, "SL", color=color.rgb(255, 20, 147), style=label.style_label_left, textcolor=color.white, size=size.small)
    
    new_setup_triggered := false

// Show persistent profit target line
if show_risk_reward and show_stop_targets and not new_setup_triggered and not na(last_take_profit)
    bool profit_target_hit = (last_trade_signal == "LONG" and close >= last_take_profit) or (last_trade_signal == "SHORT" and close <= last_take_profit)
    bool trailing_stop_hit = trailing_activated and not na(trailing_stop_level) and ((last_trade_signal == "LONG" and close <= trailing_stop_level) or (last_trade_signal == "SHORT" and close >= trailing_stop_level))
    
    if profit_target_hit or trailing_stop_hit
        line.delete(profit_target_line)
        label.delete(pt_label)
        line.delete(stop_loss_line)
        label.delete(sl_label)
        last_take_profit := na
        last_trade_signal := na
        last_stop_loss := na
        persistent_entry_price := na
        
        if current_trade_active and not na(last_entry_price)
            float full_profit_achieved = 0.0
            float full_risk_taken = 0.0
            
            if profit_target_hit
                if last_trade_signal == "LONG"
                    full_profit_achieved := (last_take_profit - last_entry_price) * (remaining_position_size / 100.0)
                    full_risk_taken := (last_entry_price - last_stop_loss) * (remaining_position_size / 100.0)
                else if last_trade_signal == "SHORT"
                    full_profit_achieved := (last_entry_price - last_take_profit) * (remaining_position_size / 100.0)
                    full_risk_taken := (last_stop_loss - last_entry_price) * (remaining_position_size / 100.0)
            else if trailing_stop_hit
                if last_trade_signal == "LONG"
                    full_profit_achieved := (trailing_stop_level - last_entry_price) * (remaining_position_size / 100.0)
                    full_risk_taken := (last_entry_price - last_stop_loss) * (remaining_position_size / 100.0)
                else if last_trade_signal == "SHORT"
                    full_profit_achieved := (last_entry_price - trailing_stop_level) * (remaining_position_size / 100.0)
                    full_risk_taken := (last_stop_loss - last_entry_price) * (remaining_position_size / 100.0)
            
            successful_trades := successful_trades + 1
            total_profit_achieved := total_profit_achieved + full_profit_achieved
            total_risk_taken := total_risk_taken + full_risk_taken
            
            current_trade_active := false
            max_pips_beyond_breakout := 0.0
            partial_taken := false
            trailing_activated := false
            trailing_stop_level := na
            partial_exit_level := na
            persistent_partial_exit_level := na

// RSI Calculation
float rsi_value = show_rsi ? ta.rsi(close, rsi_length) : na

// Risk-Reward Ratio Table
if show_risk_reward and show_table
    color table_bg = light_table_theme ? color.white : color.rgb(20, 20, 30)
    color header_bg = light_table_theme ? color.rgb(240, 240, 240) : color.rgb(30, 30, 50)
    color header_text = light_table_theme ? color.rgb(50, 50, 50) : color.rgb(200, 200, 255)
    color success_text = light_table_theme ? color.rgb(0, 150, 0) : color.rgb(0, 255, 150)
    color success_bg = light_table_theme ? color.rgb(220, 255, 220) : color.rgb(0, 50, 25)
    color warning_text = light_table_theme ? color.rgb(200, 0, 0) : color.rgb(255, 100, 100)
    color warning_bg = light_table_theme ? color.rgb(255, 220, 220) : color.rgb(50, 0, 0)
    color info_text = light_table_theme ? color.rgb(150, 100, 0) : color.rgb(255, 200, 100)
    color info_bg = light_table_theme ? color.rgb(255, 250, 220) : color.rgb(50, 30, 0)
    
    var table rr_table = table.new(position.top_right, 2, show_volume ? (enable_volume_filter ? (show_rsi ? 7 : 6) : (show_rsi ? 6 : 5)) : (show_rsi ? 5 : 4), bgcolor=table_bg, border_width=2, border_color=color.rgb(100, 100, 150))
    
    if barstate.islast
        table.cell(rr_table, 0, 0, "🔥 STRATEGY HUD 🔥", text_color=color.white, bgcolor=color.rgb(60, 20, 80), text_size=size.large)
        table.cell(rr_table, 1, 0, use_fixed_stops ? "Fixed " + str.tostring(fixed_stop_pips) + " PIP" : "Dynamic", text_color=color.white, bgcolor=color.rgb(60, 20, 80), text_size=size.large)
        
        float current_rr = na
        if not na(last_trade_signal) and not na(persistent_entry_price) and not na(last_take_profit)
            if last_trade_signal == "LONG"
                current_rr := (last_take_profit - persistent_entry_price) / (persistent_entry_price - last_stop_loss)
            else if last_trade_signal == "SHORT"
                current_rr := (persistent_entry_price - last_take_profit) / (last_stop_loss - persistent_entry_price)
        
        string signal_rr_text = not na(last_trade_signal) ? last_trade_signal : "na"
        if not na(current_rr) and current_rr > 0
            signal_rr_text := signal_rr_text + " | 1:" + str.tostring(current_rr, "#.##")
        
        table.cell(rr_table, 0, 1, "📈 Signal & R:R", text_color=header_text, bgcolor=header_bg)
        table.cell(rr_table, 1, 1, signal_rr_text, text_color=last_trade_signal == "LONG" ? success_text : warning_text, bgcolor=last_trade_signal == "LONG" ? success_bg : warning_bg)
        
        float pip_distance = na
        if not na(last_trade_signal) and not na(persistent_entry_price) and not na(last_take_profit)
            if last_trade_signal == "LONG"
                pip_distance := (last_take_profit - persistent_entry_price) * 10000
            else if last_trade_signal == "SHORT"
                pip_distance := (persistent_entry_price - last_take_profit) * 10000
        
        string entry_distance_text = not na(persistent_entry_price) ? str.tostring(persistent_entry_price, "#.#####") : "na"
        if not na(pip_distance)
            entry_distance_text := entry_distance_text + " | " + str.tostring(pip_distance, "#") + "p"
        
        table.cell(rr_table, 0, 2, "🎯 Entry & Distance", text_color=header_text, bgcolor=header_bg)
        table.cell(rr_table, 1, 2, entry_distance_text, text_color=info_text, bgcolor=info_bg)
        
        float full_success_rate = total_breaches > 0 ? (successful_trades / total_breaches) * 100 : 0.0
        float partial_success_rate = total_breaches > 0 ? (partial_successes / total_breaches) * 100 : 0.0
        float overall_success_rate = total_breaches > 0 ? ((successful_trades + partial_successes) / total_breaches) * 100 : 0.0
        
        table.cell(rr_table, 0, 3, "🎯 Success Rate/Edge", text_color=header_text, bgcolor=header_bg)
        table.cell(rr_table, 1, 3, str.tostring(overall_success_rate, "#.#") + "% (" + str.tostring(successful_trades + partial_successes) + "/" + str.tostring(total_breaches) + ")", text_color=overall_success_rate >= 50.0 ? success_text : warning_text, bgcolor=overall_success_rate >= 50.0 ? success_bg : warning_bg)

        string position_pm_text = not na(remaining_position_size) ? str.tostring(remaining_position_size, "#.##") + "%" : "na"
        if current_trade_active
            position_pm_text := position_pm_text + " | P:" + (partial_taken ? "Y" : "N") + " T:" + (trailing_activated ? "Y" : "N")
        
        table.cell(rr_table, 0, 4, "📊 Position & PM", text_color=header_text, bgcolor=header_bg)
        table.cell(rr_table, 1, 4, position_pm_text, text_color=info_text, bgcolor=info_bg)

        if show_volume
            float avg_volume = ta.sma(volume, 20)
            float vol_std = ta.stdev(volume, 20)
            float volume_z_score = vol_std > 0 ? (volume - avg_volume) / vol_std : 0.0
            string volume_status = "Normal"
            color volume_color = light_table_theme ? color.rgb(255, 140, 0) : color.rgb(255, 165, 0)
            
            if not na(volume_z_score)
                if volume_z_score > 1.0
                    volume_status := "High"
                    volume_color := success_text
                else if volume_z_score < -1.0
                    volume_status := "Weak"
                    volume_color := warning_text
                else
                    volume_status := "Normal"
                    volume_color := light_table_theme ? color.rgb(255, 140, 0) : color.rgb(255, 165, 0)
            
            string volume_filter_text = not na(volume_z_score) ? volume_status + " (" + str.tostring(volume, "#") + "K)" : "Loading..."
            
            if enable_volume_filter
                bool volume_filter_active = not na(volume_z_score) and volume_z_score >= volume_filter_threshold
                string filter_status = volume_filter_active ? "✅" : "❌"
                volume_filter_text := volume_filter_text + " | " + filter_status + " [" + str.tostring(volume_filter_threshold, "#.#") + "]"
                volume_color := volume_filter_active ? success_text : warning_text
            
            table.cell(rr_table, 0, 5, "📈 Volume & Filter", text_color=header_text, bgcolor=header_bg)
            table.cell(rr_table, 1, 5, volume_filter_text, text_color=volume_color, bgcolor=info_bg)

        if show_rsi
            string rsi_status = "Neutral"
            color rsi_color = light_table_theme ? color.rgb(255, 140, 0) : color.rgb(255, 165, 0)
            
            if not na(rsi_value)
                if rsi_value >= 70
                    rsi_status := "Overbought"
                    rsi_color := light_table_theme ? color.rgb(255, 0, 0) : color.rgb(255, 50, 50)
                else if rsi_value <= 30
                    rsi_status := "Oversold"
                    rsi_color := light_table_theme ? color.rgb(0, 255, 0) : color.rgb(50, 255, 50)
                else if rsi_value > 50
                    rsi_status := "Bullish"
                    rsi_color := light_table_theme ? color.rgb(0, 150, 0) : color.rgb(0, 200, 0)
                else if rsi_value < 50
                    rsi_status := "Bearish"
                    rsi_color := light_table_theme ? color.rgb(150, 0, 0) : color.rgb(200, 0, 0)
                else
                    rsi_status := "Neutral"
                    rsi_color := light_table_theme ? color.rgb(255, 140, 0) : color.rgb(255, 165, 0)
            
            string rsi_text = not na(rsi_value) ? rsi_status + " (" + str.tostring(rsi_value, "#.#") + ")" : "Loading..."
            
            bool rsi_filter_active = not na(rsi_value) and rsi_value < 70 and rsi_value > 30
            string rsi_filter_status = rsi_filter_active ? "✅" : "❌"
            rsi_text := rsi_text + " | " + rsi_filter_status + " [30-70]"
            
            if not na(rsi_value)
                if rsi_value >= 70
                    rsi_color := light_table_theme ? color.rgb(255, 0, 0) : color.rgb(255, 50, 50)
                else if rsi_value <= 30
                    rsi_color := light_table_theme ? color.rgb(0, 255, 0) : color.rgb(50, 255, 50)
                else if rsi_value > 50
                    rsi_color := light_table_theme ? color.rgb(0, 150, 0) : color.rgb(0, 200, 0)
                else if rsi_value < 50
                    rsi_color := light_table_theme ? color.rgb(150, 0, 0) : color.rgb(200, 0, 0)
                else
                    rsi_color := info_text
            
            int rsi_row = show_volume ? (enable_volume_filter ? 6 : 5) : 4
            table.cell(rr_table, 0, rsi_row, "📊 RSI & Filter", text_color=header_text, bgcolor=header_bg)
            table.cell(rr_table, 1, rsi_row, rsi_text, text_color=rsi_color, bgcolor=info_bg)

// RSI Overbought/Oversold Visual Indicators
plotshape(show_rsi and not na(rsi_value) and rsi_value >= 70, title="RSI Overbought", location=location.abovebar, color=color.red, style=shape.circle, size=size.tiny)
plotshape(show_rsi and not na(rsi_value) and rsi_value <= 30, title="RSI Oversold", location=location.belowbar, color=color.green, style=shape.circle, size=size.tiny)

// Debug Visual Indicators
plotshape(show_debug_symbols and barstate.islast and not na(most_recent_high) and close > most_recent_high, title="Close > High", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.tiny)
plotshape(show_debug_symbols and barstate.islast and not na(most_recent_high) and close[1] <= most_recent_high, title="Close[1] <= High", location=location.abovebar, color=color.orange, style=shape.triangledown, size=size.tiny)
plotshape(show_debug_symbols and barstate.islast and not na(most_recent_high) and close > most_recent_high and close[1] <= most_recent_high, title="BREAKOUT DETECTED", location=location.abovebar, color=color.red, style=shape.diamond, size=size.small) 